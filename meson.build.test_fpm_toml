project('CellConstructor', 'fortran', 'c',
  version: '1.5.0',
  license: 'GPL',
  default_options: ['fortran_args=-cpp', 'fortran_args=-O2']
)

# --- System and Python Dependencies ---
python = import('python')
python_installation = python.find_installation()
numpy_incdir = run_command(
  python_installation, '-c', 'import numpy; print(numpy.get_include())',
  check: true
).stdout().strip()

fpm_exe = find_program('fpm', required: true)
f2py_exe = find_program('f2py', required: true)

# Searches the system for the BLAS and LAPACK libraries.
lapack_dep = dependency('lapack', required: true)
blas_dep = dependency('blas', required: true)
openmp_dep = dependency('openmp', required: true)

# Use fpm to build and install your Fortran sources.
# Meson assumes a fpm.toml file exists in the source directory.
# fpm.toml tells fpm which files to compile and what to name the library.
run_command(
    fpm_exe,
    'install',
    '--prefix', meson.current_build_dir() / 'fpm_build',
    '--flag', ['-g', '-fPIC', '-O2', '-fopenmp'],
    check : true
)

# --- Definition of Fortran Extensions ---

# Extensi√≥n 'symph'
# symph_sources is now defined by the fpm.toml file.
symph_fortran_src = files(
  'FModules/symdynph_gq_new.f90', 'FModules/symm_base.f90',
  'FModules/sgam_ph.f90', 'FModules/invmat.f90', 'FModules/set_asr.f90',
  'FModules/error_handler.f90', 'FModules/io_global.f90',
  'FModules/flush_unit.f90', 'FModules/symvector.f90',
  'FModules/fc_supercell_from_dyn.f90', 'FModules/set_tau.f90',
  'FModules/cryst_to_car.f90', 'FModules/recips.f90',
  'FModules/q2qstar_out.f90', 'FModules/rotate_and_add_dyn.f90',
  'FModules/trntnsc.f90', 'FModules/star_q.f90', 'FModules/eqvect.f90',
  'FModules/symm_matrix.f90', 'FModules/from_matdyn.f90',
  'FModules/interp.f90', 'FModules/q_gen.f90', 'FModules/smallgq.f90',
  'FModules/symmetry_high_rank.f90', 'FModules/unwrap_tensors.f90',
  'FModules/get_latvec.f90', 'FModules/contract_two_phonon_propagator.f90',
  'FModules/get_q_grid_fast.f90', 'FModules/kind.f90',
  'FModules/constants.f90', 'FModules/eff_charge_interp.f90',
  'FModules/get_translations.f90', 'FModules/get_equivalent_atoms.f90'
)

# Use f2py to create the C wrapper
symph_wrapper = custom_target(
    'symph_f2py_wrapper',
    input: symph_fortran_src,
    output: 'symph-f2pywrappers.c',
    command: [
        f2py_exe,
        '-m', 'symph',
        '@INPUT@',
        '--quiet',
        '--lower',
    ],
    build_by_default: true,
)

# Create the Python extension module
py_symph_ext = python_installation.extension_module(
    'symph',
    symph_wrapper,
    meson.current_build_dir() / 'fpm_build' / 'lib' / 'libsymph.a',
    install: true,
    include_directories: [
        include_directories(numpy_incdir),
        meson.current_build_dir() / 'fpm_build' / 'include'
    ],
    dependencies: [lapack_dep, blas_dep, openmp_dep],
    link_args: ['-fopenmp'],
    install_rpath: '$ORIGIN/..',
)

# ... [The other extension definitions] ...

# --- Definition of the C Extension 'cc_linalg' ---
wrapper_file = ''
if python_installation.version().version_compare('<3.0')
  wrapper_file = 'CModules/wrapper.c'
else
  wrapper_file = 'CModules/wrapper3.c'
endif

cc_modules_sources = files('CModules/LinAlg.c', wrapper_file)
py_cc_linalg_ext = python_installation.extension_module(
  'cc_linalg',
  cc_modules_sources,
  include_directories: include_directories(numpy_incdir),
  install: true,
  install_rpath: '$ORIGIN/..'
)

# --- Installing the Python package 'cellconstructor' ---
install_data(
  'cellconstructor/__init__.py',
  'cellconstructor/AnharmonicForceFields.py',
  'cellconstructor/calculators.py',
  'cellconstructor/Methods.py',
  'cellconstructor/Phonons.py',
  'cellconstructor/Spectral.py',
  'cellconstructor/ThermalConductivity.py',
  'cellconstructor/Units.py',
  'cellconstructor/Bands.py',
  'cellconstructor/ForceTensor.py',
  'cellconstructor/Manipulate.py',
  'cellconstructor/Moro_object.py',
  'cellconstructor/Settings.py',
  'cellconstructor/Structure.py',
  'cellconstructor/symmetries.py',
  'cellconstructor/Timer.py',
  install_dir: python_installation.get_install_dir() / 'cellconstructor',
)

install_data(
  'cellconstructor/SymData/15.dat',
  'cellconstructor/SymData/36_red.dat',
  'cellconstructor/SymData/36.dat',
  'cellconstructor/SymData/60.dat',
  'cellconstructor/SymData/64.bcs',
  'cellconstructor/SymData/64.dat',
  'cellconstructor/SymData/convert_sym.py',
  install_dir: python_installation.get_install_dir() / 'cellconstructor' / 'SymData'
)

# --- Installing the executable scripts ---
python_installation.install_sources([
  'scripts/symmetrize_dynmat.py',
  'scripts/cellconstructor_test.py',
  'scripts/view_scf_atoms.py'
])

# Set the tests by pytest. (Needs pytest installed)
pytest_exe = find_program('pytest', required: false)

if pytest_exe.found()
  test('pytest', pytest_exe,
    args : ['-v'],
    workdir : meson.project_source_root()
  )
else
  message('pytest no encontrado; se omiten tests con pytest.')
endif
